*******2024-07-12 수업 21일차*******
자바 람다 (함수형 프로그래밍 , Java8부터 도입된 기능)
익명 함수 = 람다 lamda  ==> 람다식
람다식 ==> 메서드에 인수를 전달하거나 변수에 저장하는 방법을 기술할 식

람다 표현식
매개변수 리스트 : 매개변수(,)로 구분하여 0개이상의 매개변수를 가질 수 있음
람다 연산기호( 화살표 연산자 -> ) : 람다본문에서 매개변수 리스트를 분리한다. 
					    함수 시그니터와 본문 사이의 다리역할
본문 : 람다가 호출될 때 실행 될 코드
(parameter) -> {
	본문
}



==함수형 인터페이스==
람다 표현식은 함수형 인터페이스와 함께 사용되는 경우가 많다.
함수형 인터페이스란?
단일 추상 메서드(SAM)를 선언하는 인터페이스

@FunctionalInterface
interface MathOperation {
	int operate(int a, int b);
}
의미 : MathOperation를 사용하면 operate메서드를 구현하는 람다 표현식을 만들어
두 정수의 대해 다양한 수학적 연산을 수행 할 수 있습니다.
@FunctionalInterface 선택사항이지만, SAM으로 유지되도록 인증해준다.

람다 사용 사례와 장점
- 간소화된 코드 : 읽기 쉬워진 코드를 작성 가능
- 함수형 프로그래밍 : 람다 표현식을 통해 자바는 함수를 매개변수로 전달하고
			   변수에 저장하는 함수형 프로그래밍 패러다임을 이해하고 사용 할 수 있다.
- 컬렉션 처리 : 람다 + 스트림API 를 함께 사용하며 매핑,필터링, 요소 축소, 고급 컬렉션 처리작업을 수행 할 수 있다.
- 이벤트 처리 : 이벤트 리스너의 간결한 표현


********2024-07-15 수업 22일차*******
%복습%
람다식 : 함수형 프로그래밍
-함수를 정의하고, 이 함수를 데이터 처리부로 보내 데이터를 처리하는 기법
-데이터 처리부는 데이터만을 가지고 있고, 
처리방법이 정해져 있지않아 외부에서 제공된 함수를 의존한다.
*인젝션

-람다식은 중첩클래스로부터 시작

*중접클래스
-특정 클래스만 관계를 맺을 경우 중접클래스로 선언하는 것이 유지보수에 더 이점이 있다.
-클래스 내부에 선언한 클래스(Nested Class)
=클래스의 멤버를 쉽게 사용하고 외부에는 중첩관계 클래스를 감춤으로써 코드의 복잡성을 줄일 수 있다.

-선언하는 위치에 따라 두 분류로 나눌 수 있음
-1) 클래스의 멤버로 선언되는 중접클래스 : 멤버클래스
	class A {
		class B {...}
		} //A객체를 생성해야지만 B객체를 생성할 수있다. : 인스턴스 멤버 클래스
	class A {
		static class B {...}
		} //A객체를 생성하지 않아도 B객체를 생성 할 수 있다. : 정적 멤버 클래스
-2) 메소드 내부에서 선언되는 중텁 클래스 : 로컬클래스
	class A {
		void method() {
			class B {...}
			}
		} //method 가 실행할 때만 B객체를 생성할 수 있다.

로컬변수를 로컬클래스에서 사용 할 경우 로컬 변수는 final 특성을 부여한다.
값을 읽을 수만 있고, 값을 수정 할 수 없도록 제한(로컬클래스 내부에서 값을 변경 불가 하도록 제한한다.)

중접 인터페이스 : 클래스의 멤버로 선언된 인터페이스
*클래스 내부에 인터페이스를 선언하는 이우 : 해당 클래스와 긴밀한 관계를 맺는 객체를 만들기 위함이다.

class A {
	[public / private] [static] interface B {}
}


익명 객체(익명 클래스) : 프로그램에서 일시적으로 한번만 사용되고 버려지는 객체(재사용 되지 않는)
=> 확장성 < 유지보수
프로그램내에서 일시적으로 한번만 사용되느 객체의 겅우
-> UI 이벤트, 스레드 객체

재사용성이 필요 없고 유지보수의 편의성을 제공하려 할때

