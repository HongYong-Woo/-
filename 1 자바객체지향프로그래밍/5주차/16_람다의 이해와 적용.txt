*******2024-07-12 수업 21일차*******
자바 람다 (함수형 프로그래밍 , Java8부터 도입된 기능)
익명 함수 = 람다 lamda  ==> 람다식
람다식 ==> 메서드에 인수를 전달하거나 변수에 저장하는 방법을 기술할 식

람다 표현식
매개변수 리스트 : 매개변수(,)로 구분하여 0개이상의 매개변수를 가질 수 있음
람다 연산기호( 화살표 연산자 -> ) : 람다본문에서 매개변수 리스트를 분리한다. 
					    함수 시그니터와 본문 사이의 다리역할
본문 : 람다가 호출될 때 실행 될 코드
(parameter) -> {
	본문
}



==함수형 인터페이스==
람다 표현식은 함수형 인터페이스와 함께 사용되는 경우가 많다.
함수형 인터페이스란?
단일 추상 메서드(SAM)를 선언하는 인터페이스

@FunctionalInterface
interface MathOperation {
	int operate(int a, int b);
}
의미 : MathOperation를 사용하면 operate메서드를 구현하는 람다 표현식을 만들어
두 정수의 대해 다양한 수학적 연산을 수행 할 수 있습니다.
@FunctionalInterface 선택사항이지만, SAM으로 유지되도록 인증해준다.

람다 사용 사례와 장점
- 간소화된 코드 : 읽기 쉬워진 코드를 작성 가능
- 함수형 프로그래밍 : 람다 표현식을 통해 자바는 함수를 매개변수로 전달하고
			   변수에 저장하는 함수형 프로그래밍 패러다임을 이해하고 사용 할 수 있다.
- 컬렉션 처리 : 람다 + 스트림API 를 함께 사용하며 매핑,필터링, 요소 축소, 고급 컬렉션 처리작업을 수행 할 수 있다.
- 이벤트 처리 : 이벤트 리스너의 간결한 표현