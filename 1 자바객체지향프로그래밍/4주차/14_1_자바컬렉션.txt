*******2024-07-10 수업 19일차******
컬렉션
List 계열 : 순서가 있음(index 존재), 중복 값 가능
Set 계열 : 순서가 없음, 중복 값 불가
Map계열 : key는 중복불가(Set), 값은 중복가능

리터럴 풀이 Set으로 되어있음 (중복 X)


Array : 데이터를 나열하고, 각 데이터를 인덱스에 대응하도록 구성한 데이터 구조
배열의 필요성
1. 같은 종류의 데이터를 효율적으로 관리하기위해 사용
2. 같은 종류릐 데이터를 순차적으로 저장
장점 : 인덱스로 인해 데이터에 빠른 접근(첫 데이터 위치에서 상대적인 위치(index)로 접근이 쉬움
단점 : 데이터의 추가/삭제 어려움(미리 최대길이를 지정해서 사용함)


링크드 리스트(Linked List)
연결리스트
배열은 순차적으로 연결된 공간에 데이터를 나열하는 구조
링크드리스트는 떨어진 곳에 존재하는 데이터를 화살표(->포인터)로 연결해서 관리하는 데이터 구조

링크드 리스트 기본 구조와 용어
-노드(Node) : 데이터의 저장 단위 (데이터값, 포인터)로 구성
-포인터(Pointer) : 각 노드 안에서, 다음이나 이전의 노드와의 연결정보를 가지고 있는 공간
장점 : 미리 데이터 공간에 할당하지 않아도 된다. 빈번한 추가/삭제 시 효율적 관리 용이
단점 : 연결을 위한 별도의 공간할당이 필요하므로 공간효율이 좋지는 못하다.
	연결정보를 찾는 시간이 필요하여 접근 속도가 느리다.


큐(Queue) FIFO(First In First Out), LILO(Last In Last Out)  <=반대=> 스택 LIFO

큐 알아두어야 하는 용어
-Enqueue : 큐에 데이터를 넣는 기능 add(value), offer(value)
-Dequeue : 큐에 데이터를 꺼내는 기능 poll(), remove()
 큐클래스에서 데이터 생성을 위해서는 java.util.LinkedList클래스를 사용해야 한다.
=>	Queue<Integer> queue_int = new LinkedList<>();
멀티 태스킹 - 프로세스 스케줄링 방식을 구현할때 사용됨



******2024-07-11 수업20일차******
Vector : ArrayList 나오기 전에 씀, 동기화 기능이 있어 여럿이서 한번에 작업 불가

Set
-저장 순서(Index)가  없음
-객체를 중복 저장 할 수 없음(수학의 집합으로 비유됨)

1.HashSet 을 가장 많이 사용
-중북객체를 저장 하지 않음 여기서 중복객체란 것은 동등 객체란 의미이다.
(동등 객체 : hashcode()메서드의 리턴값이 같고 equals() 비교시 true가 리턴되면 동등 객체임
즉, Set 객체를 동등객체임을 판별 후 다른 객체임을 판단후 저장.

동등객체로 확인하려면 hashCode() 와 equals(Object obj) 오버라이드 필요


Map
엔트리 객체 (키와 값으로 구성됨)
key는 중복 불가.
value는 중복 가능.


Properties
hashtable의 자식 클래스 => 요즘 잘 안씀
ISO8859-1 


==검색기능을 강화시킨 컬렉션==
Tree구조 : Node(노드)와 Branch(브랜치)를 이용해서 사이클이 이루어지지 않도록 구성한 데이터 구조
	     트리중 이진트리형태가 가장 많이 이용되는데, 탐색(검색)알고리즘 구현을 위해 사용됨
-Node : 트리에서 데이터를 저장 하는 기본요소 (데이터와 다른 연결된 노드에 대한 브랜치 정보 포함)
-Root Node : 트리에서 맨 상위의 노드
-Level : 최상위 Node(Rood)를 level 0 으로 하고 하위 브랜치로 연결된 노드의 깊이를 나타냄
-Parent Node : 어떤 노드의 상위 레벨에 연결된 노드
-Child Node : 어떤 노드의 다음 레벨에 연결된 노드
-Leaf Node(Terminal Node) : Child Node가 없는 최하위 노드
-Sibling(Brother Node) : 동일한 Parent Nod를 가지는 노드
-Depth : 트리에서 Node가 가질수 있는 최대 Level

이진트리 : 노드의 최대 브랜치가 2개인 트리
이진탐색트리(Binary Search Tree)
-이진 트리에 왼쪽 노드는 부모노드보다 작은 값, 오른쪽 노드는 부모노드 보다 큰값으로 구성
주요 용도 : 데이터 검색(탐색)
장점 : 탐색 속도를 개선 시킬 수 있다.


TreeSet : 이진트리 기반
-오름차순으로 자동 정렬됨

TreeMap : 이진트리 기반
-TreeSet과의 차이점은 저장 대상이 Entry (ket <-> value)
-entry를 저장하면 key를 기준으로 자동 정렬된다.


*******2024-07-12 수업21일차*******

Comparable   => implements Comparator<Person>
-기본 정렬(int, long => 오름차순, String => 사전순 정렬)을 구현할떄 사용하는 인테페이스 
int compareTo(T o)   => 메소드를 재정의해서 사용하겠다. 파라미터 1개

배열정렬 : Arrays.sort(array)
객체 정렬 : Collections.sort(list)

Comparator  => implements Comparator<Person>
-Comparable에서 제공하지않는 정렬을 구현할때 사용
(int, long => 내림차순, String => 사전역순 정렬, 여러개의 기준으로 정렬할때)
Comparator는 따로 클래스를 만들어 사용하기 떄문에 결합도가 낮아진다.
int compare(T o1, T o2)	=> 파라미터 2개

배열정렬 : Arrays.sort(array, myComparator)
객체 정렬 : Collections.sort(list, Comparator)


2.객체를 비교 할 수 있도록 만든다.
  기본타입 값 부등호로 비교한다.

-객체는 사용자가 기준을 정해주지 않으면 어떤 객체가 더 높은 우선순위를 갖는지 판단 할 수 없다.
 그러므로 비교기가 필요하다.

3. Java.lan.Comparable 와 Java,util.sComparator 비교
-int compareTo(T o)  : 자기 자신과 매개변수 객체를 비교
			     자기 자신을 기준으로 대소 관계를 파악한다.

-int compare(T o1, T o2) : 두 매개변수 객체를 비교

결론 : 본질적으로 비교하는 것은 같으나 비교대상이 다르다.



