*******2024-07-10 수업 19일차******
컬렉션
List 계열 : 순서가 있음(index 존재), 중복 값 가능
Set 계열 : 순서가 없음, 중복 값 불가
Map계열 : key는 중복불가(Set), 값은 중복가능

리터럴 풀이 Set으로 되어있음 (중복 X)


Array : 데이터를 나열하고, 각 데이터를 인덱스에 대응하도록 구성한 데이터 구조
배열의 필요성
1. 같은 종류의 데이터를 효율적으로 관리하기위해 사용
2. 같은 종류릐 데이터를 순차적으로 저장
장점 : 인덱스로 인해 데이터에 빠른 접근(첫 데이터 위치에서 상대적인 위치(index)로 접근이 쉬움
단점 : 데이터의 추가/삭제 어려움(미리 최대길이를 지정해서 사용함)


링크드 리스트(Linked List)
연결리스트
배열은 순차적으로 연결된 공간에 데이터를 나열하는 구조
링크드리스트는 떨어진 곳에 존재하는 데이터를 화살표(->포인터)로 연결해서 관리하는 데이터 구조

링크드 리스트 기본 구조와 용어
-노드(Node) : 데이터의 저장 단위 (데이터값, 포인터)로 구성
-포인터(Pointer) : 각 노드 안에서, 다음이나 이전의 노드와의 연결정보를 가지고 있는 공간
장점 : 미리 데이터 공간에 할당하지 않아도 된다. 빈번한 추가/삭제 시 효율적 관리 용이
단점 : 연결을 위한 별도의 공간할당이 필요하므로 공간효율이 좋지는 못하다.
	연결정보를 찾는 시간이 필요하여 접근 속도가 느리다.


큐(Queue) FIFO(First In First Out), LILO(Last In Last Out)  <=반대=> 스택 LIFO

큐 알아두어야 하는 용어
-Enqueue : 큐에 데이터를 넣는 기능 add(value), offer(value)
-Dequeue : 큐에 데이터를 꺼내는 기능 poll(), remove()
 큐클래스에서 데이터 생성을 위해서는 java.util.LinkedList클래스를 사용해야 한다.
=>	Queue<Integer> queue_int = new LinkedList<>();
멀티 태스킹 - 프로세스 스케줄링 방식을 구현할때 사용됨



