*****2024-07-01 수업 14일차*****
상속: 부모가 자식에게 물려주는 행위

*추상클래스 
-데이터 추상화
-제어 추상화

*디자인의 개념이기에 인스턴스(new) 불가

@Override //어노테이션 : 빠르게 찾아서 실행하게 해줌(컴파일 시 정확히 오버라이딩이 되었는지 체크하는 표식)

final : 상수 처리
filnal class : 최종클래스임을 표시, 상속 불가
filnal method : 오버라이딩 불가

protected : 자식에서 new 불가 super()를 이용한 호출은 가능
다형성 : 사용방법은 동일하지만 , 실행 결과가 다양하게 나오는 성질
사용방법은 동알 : 동일한 메소드를 가지고 있다.
다형성을 구현하기 위해서는 자동타입변환(업캐스팅)과 재정의가 필요
1. 상속
2. 자동타입 변환
3. 재정의
4.실행시점에서 메소드읜 실행여부 결정 (동적바인딩)

필드의 다형성 : 대입된 객체를 가지고 실행 결과가 다양하게 나올수 있다는 뜻

추상메서드 => 반드시 오버라이딩 해야 함

**어찌보면 추상클래스는 오버라이딩을 잊지 않고 반드시 하기 위해 생긴것이 아닐까...


*******2024-07-02 수업 15일차 ********
다형성 보장 4가지 전제조건
1. 상속관계
2. 업캐스팅
3. 오버라이딩
4. 동적바인딩

추상클래스 : 실체로 구현하는 클래스가 아닌 디자인을 위한 템플릿클래스
-클래스 상속
-부모생성자 호출 : super();
-부모의 멤버, 메소드 접근 : super
-protected, public, private 접근 제한의 의미
-final, static final (멤버, 클래스 , 메서드)
-타입변환 ( 업캐스팅, 다운 캐스팅)
-객체 타입 확인 : instanceof
-다형성을 제공하는 방법 : 멤버타입, 메소드 호출

==============================
1. 인터페이스 : 두 장치(객체)를 연결하는 접속기 
-추상메소드만 포함가능( 디폴트, 정적 메소드는 제외), 기능을 우선적으로 설계한것(메세지)
사용시 : implements
일반화(클래스간의 상속관계에서)  /	실체화 (인터페이스 상속에서)
DI
-인터페이스에서 변수를 그냥 선언해도 자동으로 public static final이 지정됨(생략 되어 있음)
-인터페이스에서 메소드를 그냥 선언해도 자동으로 abstract가 되어 있음
2. 인터페이스 역할 : 
3. 인터페이스 선언, 구현 클래스 선언
4. 인터페이스 구성요소
	-상수 필드
	-추상 메소드
	-디폴트 메소드 default() :상수 필드를 읽거나 추상 메소드를 호출하는 코드를 작성하기 위해 허용
	-정적 메소드
	-private 메소드
5. 다중 인터페이스 구현
6. 인터페이스 상속
7. 타입변환 (객체 타입 확인)








