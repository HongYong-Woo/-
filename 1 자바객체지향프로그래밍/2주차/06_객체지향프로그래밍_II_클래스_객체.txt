*****2024-06-21 수업 8일차*****

*객체 지향 프로그래밍의 개념
-데이터와 메서드를 포함하는 객체 개념에 기반한 프로그래밍

*객체 지향 프로그래밍의 구성 요소
	-클래스 : 여러 기능을 가지고있는 틀?
	-객체:	실체(인스턴스)화(메모리에 올라간)된 클래스
	-캡슐화 : 클래스의 기능을 접근을 차단하는 기법(private, protected, public)
	-상속 : 메모리의 확장성, 공유성 (부모클래스 <-요청(extends)- 자식클래스)  
		*자바는 단일 상속만 지원(c++을 다중상속 가능)
		부모클래스(슈퍼클래스) / 자식클래스(서브클래스)
	-다형성 : 오버로딩, 오버라이딩
	-추상화 :  객체의 특징을 표현하는 방법?

*****2024-06-25 수업 10일차 *****
*파스칼 방식
*빌더 패턴
*Nested class => 클래스 안에 클래스

abstract => 추상클래스 (반드시 재정의 해야함)
interface => 기능을 정의만 해놈
//생성자 오버로딩을 할떄는 기본 생성자를 만들어 놓자.


*****2024-06-26 수업 11일차 *****
*2차원 배열 => DB가 이런식으로 저장
행 레코드 => 정보의 단위

자료구조를 쓰는 이유 : 이동 편함, 관리(CRUD)가 편함

*클래스

6_1 클래스 학습정리 & Quiz
1.사용자 정의 자료형
2.새로운 자료형을 만드는 도구
3. 객체생성 => 결과 => 인스턴스
4. 상태정보(멤버변수)	행위정보(메서드)
5. 생성자 메서드
6. this (대문자X)
7. 인스턴스

클래스의 종류
1. 시작클래스 (Main)
2. DTO, VO : 데이터를 하나로 묶어야 될 경우
3. DAO : CRUD를 실행
4. Utillity : Scanner, Calendar...


6_1 클래스 모델 학습정리 & Quiz
1. 모델
2. DTO, DAO, Utility
3. VO , DTO
4. DAO
5. Create(저장), Read(검색), Update(갱신), Delete(삭제)
	insert		select		update	delete


*****2024-06-27 수업 12일차****
*싱글톤 패턴 : 특정 클래스의 인스턴스를 1개만 생성되는 것을 보장하는 디자인 패턴
인스턴스를 새로 생성하지 않고 최초 호출시에 만들어 두었던 인스턴스를 재활용하는 패턴
==장점==
1. 메모리 낭비를 방지 가능: 최초 한번 new로 객체를 생성하고 해당 객체를 이후에 사용하도록 공유(static)하여 메모리 낭비 문제를 방지하는 효과가 있다.

2. 접근제어 : 최초 만들어진 객체를 공유해 주지 않으면 서비스를 사용 할 수 없도록 제한 할수 있다.

==단점==
1. 의존성 문제 : 만약 서비스의 수정요청이나 확장요청시 싱글톤으로 생성된 인스턴스를 참조하는 모든 클래스들을 수정해야하한다.

2. 상속 불가 : private 생성자로 인해 상속이 어려움(상속을 통한 자식클래스를 만들수 없음 => 다형성 적용이 어려움)

3. 테스트가 어려움 : 테스트마다 공유하고 있는 인스턴스의 상태를 매번 초기화해야 하기 때문이다.
초기화 하지 않으면 static에서 상태를 공유중이어서 테스트가 정상적으로 수행되지 못할 가능성이 높다.
그래서 안티패턴 이라고도 한다.

====> 개선하기 위해 스프링의 도움을 받아 보완하고 싱글톤 패턴의 장점만 적용하여 사용하도록 설계한다. ex) 스프링 컨테이너


Stack => LIFO 구조



6_1 클래스 모델 학습정리 & Quiz
1. static
2. Call Stack Frame Area
3. 생성자를 private로
4. 인스턴스
5.  메소드(Method Area), 스택(Stack Area), 힙(Heap Area), 리터럴풀(Literal Pool)(힙안에 있음)

