char 도 정수형인 이유 아스키코드 떄문

문자타입은 하나의 문자 ' ' ==> 문자리터럴은 유니코드로 저장.

*유니코드
세계 각국의 문자를 0~65535 숫자로 매핑한 국제 표준규약.
자바는 유니코드를 저장 할 수 있도록 char 타입을 제공

 char var1 = 'A'; //숫자 65
 char var2 = 65;
출력시 둘다 A

 char var3 = '가'; // 44032
 char var4 = 44032;
출력시 둘다 가

String str = ""; //가능
char c = ' '; //공백의 유니코드 32   char c = ''; 는 안됨 숫자형 변수는 반드시 실제값을 할당해 줘야 함

//리터럴 : 코드에서 프로그래머가 직접 입력한 값
int x = 0b1011; //0B1011  11을 이진수로 표현
int o = 013; //           	11을 8진수로 표현
int h = 0xB3; //0X1a      179을 16진수로 표현

byte v1 = -128;
        byte v2 = (byte) 128; // -128 다운캐스팅

        //long 타입은 수치가 큰 데이터를 다루는 프로그램에서 사용됨
        long l1 = 10;
        long l2 = 20L;
        long l3 = 1000000000000000000L;


//실수 (float(7자리), double(15자리)
        double d1 = 0.25;
        double d2 = -3.14;
        double d3 = 5e2; // 5.0 *10늬 제곱 = 500.0
        double d4 = 0.12e-2; // 0.12 * 10의 -2제곱 = 0.0012

        float f1 = 3.14f;
        float f2 = 3e6f;

//double 타입은 float 타입보다 약2배정도 유효자릿수를 가지기 때문에 정확한 데이터 저장 가능



//논리 타입 : 참과 거짓을 의미 , 리터럴은 true, false 두가지의 상태겂을 저장 필요가 있을때 사용
//조건문과 제어문의 실행 흐름을 변경하는데 사용, 연산식에서 비교 및 논리 연산의 산출값을 검증할때 사용


*****2024-06-14 수업

abstract : 메모리에 못 올림
final ->수정 금지(고정)  ex) public final class System
InputStream ->바이트 단위로 처리 (이미지, 음악파일 등 대용량 처리)
InputStreamReader ->문자열로 처리

인터페이스 : 기능을 담당

자동 타입 변환(promotion)
기본타입
byte short, char<int<long<float<double

//강제 타입변환 (큰->작) : 캐스팅(Casting)
//강제 타입의 목적은? 원래 값이 유지되면서 타입만 바꾸고자 할떄     
int intVal = charValue;
char charVal2 = (char)intVal;


//자바에서 +연산자의 기능
//1. 피연산자가 모두 숫자일 경우 덧셈연산 수행
//2. 피연산자 증 하나가 문자일 경우 나머지 피연산자도 문자열로 자동 변환하여 문자열 결합 연산
        int op1 = 3 + 7; //10(int)
        String op2 = "3" + 7; // "37"
        String op3 = "3" + "7"; // "37"

        int op4 = 1 + 2+ 3; // 3+ 3 = 6
        String op5 = 1 + 2 + "3"; // 1 +2 => 3+ "3" => "33"
        String op6 = 1 + "2" + 3; // 1 + "2" ==> "12" + 3 ==> "123"
        String op7 = "1" + 2 +3; // "1" + 2 ==> "12" + 3 ==> "123"
        String op8 = "1" + (2 + 3); // "1" + 5 ==> "15"

//String 타입 변환
        int op9 = Integer.parseInt("10");
        System.out.println(op9+10);
        double op10 = Double.parseDouble("3.14");
        System.out.println(op10+5.5);
        boolean op11 = Boolean.parseBoolean("trUe");
        System.out.println(op11);

//기본 타입으로 바꾼 값을 다시 String 타입으로 변경
        String str1 = String.valueOf(10);
        String str2 = String.valueOf(op9);
        String str3 = String.valueOf(op11);
        System.out.println(str3);


자바13부터 텍스트 블럭 제공
String str3 = """
                { 안녕하세요
                  반갑습니다
                id : silver
                pwd : 0000
                }
                """;

//변수의 유효범위(variable Scope) : 해당변수가 접근 가능한 범위를 의미
 //자바에서는 변서가 선언된 위치에 따라 범위가 결정돰.

//1. 블럭 내부의 변수
        int a = 10;
        if(a == 10) {
            int b = 20;
            System.out.printf("a = %d  b = %d\n",a,b);
        }
        //System.out.println(b); 오류

//2. 메소드의 내부 변수 : 메서드 내에서 선언된 변수는 메서드 내에서만 유효.
        calculator(100, 200);
        int result = calculator2(100, 200);
        System.out.println(result);
//클래스 변수: 해당 클래스의 모든 인스턴스에서 접근 가능
//렉시컬 스코프: 변수의 유효 범위가 코드의 작성 위치에 의해 결정됨


**Printf
//printf : 줄 바꿈X 줄바꿈 => \n  %n
//%b : boolean 출력   
//%d : 10진수 정수출력    %o : 8진수    %x : 16진수   %f : 소수 출력
//%e : 지수형태의 실수    %c : 문자     %s : 문자열

 //10진수를 2진수로 출력하는 지시자는 없음. Interger.toBinaryString(int a)
//해당 메소드는 정수를 2진수로 변환해서 문자열로 반환한다. %s
int binary = 0b10;
System.out.printf("binary = %s%n", Integer.toBinaryString(binary));

char c = 'A';
System.out.printf("c = %c, %d, %n",c,(int)c);
출력 : c = A, 65, 

*외부장치에서 오는 데이터들은 해지해 줘야함. 
ex) BufferedReader 시용시 마지막에 close()

