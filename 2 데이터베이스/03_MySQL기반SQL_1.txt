**********2024-07-24 28일차**********
HR(Human Resource)
ERD(Entity Relation Diagram)

1.SELECT (데이터 검색) : 테이블에 저장된 데이터를 추출하는 명령어
				표시하고자 하는 열(column)만 선택하여 출력 할수 있다.(선택범위 지정)

concat()
as
not
BETWEEN a AND b
ORDER BY 기준으로할필드명
ASC => 오름차순
DESC => 내림차순

와일드 문자 : %, [], [^], _

[0-5] : 0-5 사이의 숫자로 시작하는 문자열
[^0-5] : 0-5 사이 숫자로 시작하지 않는 문자열
_ : 득정 위치에 있는 1개의 문자와 일치 '_구%'   => 축구 O   발야구 X ('__구%')

SELECT 실행 순서
1. FROM
2. WHERE
3. Group by
4. Having
5. SELECT
6. ORDER BY

SQL문은 실행순서가 없는 비절차적인 언어지만 내부적 실행 순서는 존재한다


조인(join) : 한테이블의 행을 다른 테이블의 행에 연결하여 두개 이상의 테이블을 결합하는 연산

-고객과 고객의 주문에 대한 데이터를 모두 출력
select *
from customer, orders
where customer.custid = orders.custid; -- 두 테이블의 연결 조건을 추가


하나의 스키마에서 여러 테이블이 존재하고 저장하고 있다.
테이블간의 관계를 기반으로 수행되는 연산
join sql :1999 문법 이전과 이후 구분
-join 종류는 등가 조인(equi join) ==> 오라클		:	natural / inner join
-outer join (외부 조인)	==> left outer join, right outer join
-self join (자체 조인)
-비등가 조인
-카티시안 곱 ==> cross join



**********2024-07-25 수업 29일차 **********
부속 질의(서브쿼리)

- 서브쿼리(subquery) - nested query(중첩 쿼리)
- 실행 순서 : WHERE 절의 부속질의를 먼저 처리하고 전체질의를 진행

SELECT bookname
FROM book
WHERE price = (SELECT MAX(price) FROM book);

- 서브쿼리는 SQL문이므로 결과는 테이블로 반환, 
- 단일행 - 단일열(1x1), 다중행 - 단일열(Nx1), 단일행 - 다중열(1xN), 다중행 - 다중열(NxN)
-- 질의 3-29 도서를 구매한 적이 있는 고객의 이름을 검색하시오
SELECT name
FROM customer
WHERE custid In(select custid from orders);

- 서브쿼리는 하위 부속질의와 상관부속질의어 두가지가 있는데, 
- 상위 부속질의어의 튜플을 이용하여 하위부속질의를 계산한다.

-- 질의 3-31 출판사 별로 출판사의 평균 도서가격보다 비싼 도서의 이름을 조회하시오.
-- 평균가보다 도서의 가격이 비싼지 비교한 쿼리 b1, b2 ==> 튜플 변수
SELECT publisher, bookname
from book b1
where b1.price > (SELECT avg(price)
from book b2 WHERE b1.publisher = b2.publisher);

서브쿼리에서 값을 하나만 가져오는게 아닌 여러개의 값을 비교할때
( 단일행 - 다중열(1xN), 다중행 - 다중열(NxN) )
-ANY(or) / ALL(and) / SOME(ANY랑 비슷)
 = any 는 in이랑 같음

- 서브 쿼리는 테이블을 복사할때 많이 활용됨 => 데이터는 복제해 오지만 제약조건은 복제하지않음
CREATE TABLE usertbl2 (SELECT * FROM usertbl);
alter를 이용해서 키 지정이 필요.
ALTER table usertbl2 add CONSTRAINT pk_usertbl2 PRIMARY KEY(userid);

-총합 중간합계가 필요한 경우가 있다. GROUP BY 절과 WITH ROLLUP문을 사용한다.


**********2024-07-26 수업30일차**********

-- 출력하는 개수를 제한하는 LIMIT
SELECT employee_id, hire_date FROM employees ORDER BY hire_date ASC LIMIT 10;
SELECT employee_id, hire_date FROM employees ORDER BY hire_date ASC LIMIT 1,6;

-- 테이블을 복제하는 서브 쿼리(SELECT)
CREATE TABLE job_grades1 (SELECT grade_level FROM job_grades);


- INSERT문 기본 : 테이블에 데이터를 삽입하는 명령어
-- INSERT [into] 테이블명(열1, 열,2 열,3......);
-- 태이블 이름 다음에 나오는 열은 생략가능 생략할 경우, VALUES 다음에 오는 값들ㅡ이 순서 및 개수가 테이블이 정의된 열순서와 개수가 동일해야함

SELECT @@autocommit;
SET autocommit =0;  ==>오토 커밋 해제

-- 자동으로 증가하는 AUTO_INCREMENT (INSERT 할떄는 해당 열이 없다고 생각하고 입력하면 된다.)
-- 자동으로 1부터 증가하는 값을 입력해준다.
-- PK, UNIQUE  제약 조건을 지정해 줘야 한다. 데이터 형은 숫자 형식만 사용 가능

-- auto_increment 를 이용하여 입력된 숫자가 어디까지 증가되었는지 궁금하다면?
SELECT LAST_INSERT_ID();

SET @@auto_increment_increment =3;  ==> auto_increment 증가값 변경



-- 대량의 심플 데이터 생성 (입력)
-- INSERT INTO 테이블 이름 (열1, 열2, ....) SELECT문
CREATE TABLE testtbl4 (SELECT employee_id, first_name, last_name FROM employees);



-- 데이터 수정(UPDATE) : 기존의 입력되어 있는 값을 변경하기 위해서 사용되는 명령어
-- [형식] : UPDATE 테이블 이름 SET 열이름1 = 값1, 열이름2 = 값2,....[WHERE 조건]; WHERE 테이블의 전채 행에 대해 변경이 이루어진다.
UPDATE testtbl4 SET last_name = '손열음' WHERE employee_id = 100;

SET sql_safe_updates =0; -- safe mode 해제



-- DELETE 데이터의 삭제 명령어 (적용단위 : 행 ) 행단위로 삭제
-- [문법] DELETE FROM 테이블이름 WHERE 조건; --WHERE문이 생략 되면 전체 데이터 삭제
DELETE FROM testtbl4 where employee_id = 110;


DELETE FROM testtbl4 WHERE last_name like 'Chen' limit 3;