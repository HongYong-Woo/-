**********2024-08-02 35일차**********

-- 순위 함수 : 조회 결과에 순위 부여
-- RoOW_NUMBER, RANK, DENSE_RANK, NTILE;

-- 1) ROW_NUMBER : 유일한 값으로 순위를 부여하는 함수 (모든 행에 유일한 값으로 부여한다.)
SELECT * FROM payment;

SELECT ROW_NUMBER() OVER(ORDER BY amount DESC) AS num, customer_id, amount
FROM( 
	SELECT customer_id, SUM(amount) AS amount FROM payment GROUP BY customer_id ) AS X;

-- 임의의 동점에 대해서 순위를 mysql이 임의로 부여하지 않게 하기 위해서 order by문에 정렬조건을 추가
SELECT ROW_NUMBER() OVER(ORDER BY amount DESC, customer_id desc) AS num, customer_id, amount
FROM( 
	SELECT customer_id, SUM(amount) AS amount FROM payment GROUP BY customer_id ) AS X;


-- RANK() => (우선순위를 고려하지 않고 순위를 부여하는 함수) : 같은 순위를 처리하는 방식이ROW_NUMBER 와 다르다.
-- RANK 함수를 활용시에는 우선 순위를 따지지 않고 같은 순위를 부여한다.
SELECT RANK() OVER(ORDER BY amount DESC) as num, customer_id, amount
FROM ( SELECT customer_id, SUM(amount) AS amount FROM payment GROUP BY customer_id ) AS X;
-- 결과 확인 시, amount 값이 같을 경우 같은 순위르 부여한 것이 확인됨
-- 공동 순위가 부여된 뒤 그 그 다음순위는 같은 순위에 있는 데이터 개수만큼 건너뛴 순위가 부여된다.


-- 파티션 별로
SELECT staff_id, ROW_NUMBER() OVER(PARTITION BY staff_id ORDER BY amount DESC, customer_id asc) AS num, customer_id, amount
FROM( 
	SELECT customer_id, staff_id, SUM(amount) AS amount FROM payment GROUP BY customer_id, staff_id ) AS X;


-- DENSE_RANK
-- 공동 순위가 부여된 뒤 그 그 다음순위는 같은 순위에 있는 데이터 개수만큼 건너뛰지 않고 부여된다.
SELECT DENSE_RANK() OVER(ORDER BY amount DESC) as num, customer_id, amount
FROM ( SELECT customer_id, SUM(amount) AS amount FROM payment GROUP BY customer_id ) AS X;


-- NTITLE() 그룹순위 : 인자로 지정한 개수만큼 데이터 행을 그룹화 한 다음 각 그룹에 순위를 부여하는 함수
-- 각 그룹에 1부터 1순위로 매겨지고, 순위는 각 행의 순위가 아니라 행이 속한 그룹의 순위이다.
SELECT NTILE(100) OVER(ORDER BY amount DESC) as num, customer_id, amount
FROM (
	SELECT customer_id, SUM(amount) as amount FROM payment GROUP BY customer_id
) AS X;


-- 분석함수 : 데이터그룹을 기반으로 앞뒤 행을 계산하거나 그룹에 대한 누적분포, 상대 순위 계산시 허용한다.
-- 집계함수와 달리 분석함수는 그룹마다 여러 행을 반환 할 수 있어서 활용도가 높다.
-- LAG() : 현재 행에서 바로 앞의 행을, LEAD() : 현재 행에서 바로 뒤의 행을 조회
-- 정리 : lag(), lead() 함수를 이용하면 전후 데이터 차이값을 자유롭게 연산할때 편리하게 확인, 사용 할 수있다.
SELECT X.payment_date, LAG(x.amount,2) over(order by x.payment_date asc) as lag_amount, amount, lead(x.amount,2) over(ORDER BY x.payment_date asc) as lead_amount
FROM (SELECT DATE_FORMAT(payment_date, '%y-%m-%d') as payment_date, sum(amount) as amount from payment 
	group by DATE_FORMAT(payment_date, '%y-%m-%d')) AS X
ORDER BY x.payment_date;


-- 누적 분포를 계산 함수 CUME_DIST() : 그룹내에서 누적 분포를 계산하는 함수 (그룹에서 테이터 값이 포함되는 위치의 누적분포를 계산하다.)
-- 범위는 0 초과 1 이하의 범위값을 반환한다. 같은 값은 항상 같은 누적 분포값을 계산한다.
-- NULL은 최하위값으로 처리 (가장 낮은 값)
SELECT X.customer_id, X.amount, CUME_DIST() OVER(ORDER BY X.AMOUNT DESC)
FROM (SELECT customer_id, SUM(amount) as amount FROM payment GROUP BY customer_id
) AS X
ORDER BY X.amount DESC;

-- 상대 순위를 계산하는 함수 PERCENT_RANK 지정한 그룹 또는 쿼리 결과로 이루어진 그룹내의 상대 순위를 계산할때 사용하는 함수.
-- CUME_DIST()는 누적 분포를 나태내고 PERCENT_RANK() 분포순위를 구한다.
SELECT X.customer_id, X.amount, PERCENT_RANK() OVER(ORDER BY X.AMOUNT DESC)
FROM (SELECT customer_id, SUM(amount) as amount FROM payment GROUP BY customer_id
) AS X
ORDER BY X.amount DESC;


