**********2024-07-29 수업31일차**********

CREATE TABLE MOVIETBL(
	movie_id       int,
	movie_title    VARCHAR(30),
	movie_director VARCHAR(20),
	movie_star     VARCHAR(20),
	movie_script   longtext,
	movie_film     LONGBLOB
)DEFAULT CHARSET = UTF8mb4;

insert into movietbl values(1, '쉰들러리스트', '스티븐 스필버그', '리암 니슨', 
load_file('D:/Programming/Java/Data/mySQL/movies/Schindlers_List.txt'), 
load_file('D:/Programming/Java/Data/mySQL/movies/Schindlers_List.mp4'));

select * from movietbl;
TRUNCATE movietbl;

-- movie_script와 movie_film 입력되자 않은 이유 알아보기
/*
1. 최대 패킷 크기 (=최대 파일 크기) 시스템 변수 확인 : max_allowed_packet 값 조회
2. 파일을 업로드 / 다운로드 할 폴더 경로를 별도로 허용해 주어야 한다. (MY-SQL SERVER) 'secure_file_priv' 조회
*/
show variables like 'max_allowed_packet'; -- 약 4mb = 4194304

show variables like 'secure_file_priv'; -- C:\ProgramData\MySQL\MySQL Server 8.0\Uploads\


insert into movietbl values(2, '쇼생크탈출', '프랑크다라본트', '팀 로빈스', 
load_file('D:/Programming/Java/Data/mySQL/movies/The_Shawshank_Redemption.txt'), 
load_file('D:/Programming/Java/Data/mySQL/movies/The_Shawshank_Redemption.mp4'));

insert into movietbl values(3, '라스트모히칸', '마이클 만', '다니엘 데이 루이스', 
load_file('D:/Programming/Java/Data/mySQL/movies/The Last_Mohicans.txt'), 
load_file('D:/Programming/Java/Data/mySQL/movies/The Last_Mohicans.mp4'));

-- 다운로드 하기
SELECT movie_script from movietbl where movie_id =1
	INTO OUTFILE 'D:/Programming/Java/Data/mySQL/movies/Schindlers_List_out.txt'
    lines terminated by '\\n'; -- 줄바꿈 문자도 그대로 다운받아서 저장한다. 옵션
    
-- movie_film 다운로드 : longblob 형식인 동영상 INTO DUMPFILE문 이용 : 바이너리 파일로 내려 받는다
SELECT movie_film from movietbl where movie_id = 3
INTO DUMPFILE  'D:/Programming/Java/Data/mySQL/movies/The Last_Mohicans_out.mp4';



/*
피봇 : 한열에 포홤된 여러값을 출력하고, 여러 열로 변환하여 테이블 반환식을 회전하고 필요하면 집계까지 수행하는 과정을 의미한다.
*/

create table pivotTest(
	uName char(5),	-- 판매자
    	season char(2),	-- 시즌
   	amount int		-- 수량
);

INSERT Into pivotTest VALUES('김진수', '겨울', 10), ('운민수', '여름', 15), ('김진수','가을',25),('김진수','봄',3),('김진수','봄',37),('윤민수','가을',40),('운민수','여름',60);
SELECT * from pivottest;

-- 판매자 별로 판매, 계절, 판매수량 : Sum(), if() 함수 활용해서 피벗테이블을 생성
SELECT uName , 
	sum(if(season = '봄', amount, 0)) as'봄',
	sum(if(season = '여름', amount, 0))as '여름',
	sum(if(season = '가을', amount, 0))as '가을',
	sum(if(season = '겨울', amount, 0))as '겨울',
    sum(amount)as '합계'
from pivotTest GROUP BY uName;

-- 계절별로 판매자의 판매수량을 집계하여 출력하는 피벗 테이블을 생성해주세요.
SELECT season,
	sum(if(uName = '김진수', amount, 0)) as'김진수',
	sum(if(uName = '운민수', amount, 0))as '운민수',
    sum(amount)as '합계'
    from pivotTest group by season;
    
    
-- JSON 데이터
/* 웹과 모바일 으용 프로그램에서는 데이터를 교환하기 위해 개발형 표준 포맷인 JSON을 활용한다.
	JSON은 속성(KEY)와 값(VALUE)으로 쌍으로 구성되어 있다. 독립적인 데이터 포맷이다.
    포맷이 단순하고 공개되어 있어 여러 프로그래밍 언어에서 채택하고 있다.
    {
		"userName" : "김삼순",
        "BirthYear" : 2002,
        "address" : "사울 성동구",
        "mobile" : "01012347689"
	}
*/
use bookstore;
SELECT JSON_OBJECT('name', name, 'height', height) as '키 180이상 회원의 정보'
FROM usertbl
WHERE height >= 180;

-- JSON 을 위한 MYSQL은 다양한 내장함수를 제공한다.
SET @json = '{
		"usertbl1" :[
			{"name": "임재범", "height": 182}, 
            {"name": "이승기", "height": 182}, 
            {"name": "성시경", "height": 186}
		]
	}';
    
SELECT JSON_VALID(@json) AS JSON_VALID; -- 문자열이 Json 형식을 만족하면 1ㅡ 만족하지 않으면 0 반환

SELECT JSON_SEARCH(@json, 'one', '성시경') as json_search;
SELECT JSON_INSERT(@json, '$.usertbl1[0].mDate', '2024-07-29') as JSON_INSERT;
SELECT JSON_REPLACE(@json, '$.usertbl1[0].name', '임영웅') as JSON_REPLACE;
SELECT JSON_REMOVE(@json, '$.usertbl1[1]') as JSON_REMOVE;
